using UnityEngine;using SceneManager = UnityEngine.SceneManagement.SceneManager;using Backfire;using Unity.VisualScripting;using UnityEditor;using UnityEngine.SceneManagement;using UnityEngine.UI;public class UIManager : MonoBehaviour{    public static UIManager Instance;        public SceneField levelSelect;    public SceneField configScene;    [Header("Core UI")]    public GameObject settingsButton;    public GameObject timeDisplay;    public GameObject healthText;    public GameObject scoreText;    public GameObject mainMenu;    [Header("Settings Panel")]    public GameObject settingsPanel;    public GameObject exitButton;    public GameObject levelSelectButton;    public GameObject resumeButton;    public GameObject musicSliderText;    public GameObject musicSlider;    public GameObject sfxSliderText;    public GameObject sfxSlider;    public GameObject settingsText;    public GameObject configButton;    public GameObject backButton;    public GameObject playButton;    [Header("Instructions")]    public GameObject instructionPanel;    public GameObject instructionText;    [Header("Win UI")]    public GameObject winPanel;    public GameObject winText;    public GameObject winTimeText;    public GameObject winScoreText;    public GameObject winButtons;    [Header("Lose UI")]    public GameObject losePanel;    public GameObject loseText;    private float _timeScale;    private bool _hasStarted;    private void Awake()    {        if (Instance != null && Instance != this)        {            Destroy(gameObject);            return;        }        Instance = this;        DontDestroyOnLoad(gameObject);                SceneManager.sceneLoaded += PrintLoadedScene;     }    private void PrintLoadedScene(Scene arg0, LoadSceneMode arg1)    {        if (arg0.name.Contains("Level ") || arg0.name == "MasterScene")        {            Debug.Log("Level loaded");            ValidateAssignments();            ConfigureUIForNewLevel();        }        mainMenu.SetActive(arg0.name.Contains("Title"));        // if (arg0.name.Contains("Title"))        // {        //     playButton = GameObject.Find("playButton");        //     playButton.GetComponent<Button>().onClick.AddListener(LevelSelectButton);        //             //     configButton = GameObject.Find("configureButton");        //     configButton.GetComponent<Button>().onClick.AddListener(ConfigButton);        //             //     exitButton = GameObject.Find("exitButton");        //     exitButton.GetComponent<Button>().onClick.AddListener(ExitButton);        // }                if (arg0.name.Contains("LevelSel"))        {            LevelSelectManager.Instance.Start();            ConfigureUIForLevelSelect();                    }        if (arg0.name.Contains("Config"))        {            backButton = GameObject.Find("backButton");            backButton.GetComponent<Button>().onClick.AddListener(BackButton);        }                print(arg0.name);    }    private void ConfigureUIForNewLevel()    {        ShowAll(true);        EnableWinUI(false);        EnableLoseUI(false);        EnableSettingsButtons(false);        EnableMusicSettings(false);        EnableSettingsSetup(false);        EnableBasicGameUI(true);        ToggleGameplayUi(true);        EnableInstructions(true);    }    private void ConfigureUIForLevelSelect()    {        ShowAll(false);        EnableWinUI(false);        EnableLoseUI(false);        EnableSettingsButtons(false);        EnableMusicSettings(false);        EnableSettingsSetup(false);        EnableBasicGameUI(false);        ToggleGameplayUi(false);        EnableInstructions(false);            }    private void Start()    {        ValidateAssignments();        AssignButtonListeners();        ShowAll(false);        EnableWinUI(false);        EnableLoseUI(false);        EnableSettingsButtons(false);        EnableMusicSettings(false);        EnableSettingsSetup(false);        EnableBasicGameUI(false);                Time.timeScale = 1f;    }        private void AssignButtonListeners()    {        settingsButton.GetComponent<Button>().onClick.AddListener(SettingsButton);        exitButton.GetComponent<Button>().onClick.AddListener(ExitButton);        levelSelectButton.GetComponent<Button>().onClick.AddListener(LevelSelectButton);        resumeButton.GetComponent<Button>().onClick.AddListener(ResumeButton);    }    private void Update()    {        if (_hasStarted) return;        if (Input.anyKeyDown) StartGame();    }    private void ValidateAssignments()    {        var fields = GetType()            .GetFields(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);        foreach (var f in fields)        {            if (f.FieldType != typeof(GameObject))                continue;            GameObject go = f.GetValue(this) as GameObject;            if (go == null)            {                // Try to find existing object in the scene by the field's name                var found = GameObject.Find(f.Name);                if (found != null)                {                    f.SetValue(this, found);                    go = found;                    Debug.Log($"UIManager: Assigned `{f.Name}` from scene");                }                else                {                    Debug.LogWarning($"UIManager: `{f.Name}` not assigned in Inspector and not found in scene");                    continue;                }            }            // Parent under UIManager and disable by default            if (go.transform.childCount == 0)            {                print(@"                                            ———————————No children?———————————                                            ⠀⣞⢽⢪⢣⢣⢣⢫⡺⡵⣝⡮⣗⢷⢽⢽⢽⣮⡷⡽⣜⣜⢮⢺⣜⢷⢽⢝⡽⣝                                            ⠸⡸⠜⠕⠕⠁⢁⢇⢏⢽⢺⣪⡳⡝⣎⣏⢯⢞⡿⣟⣷⣳⢯⡷⣽⢽⢯⣳⣫⠇                                            ⠀⠀⢀⢀⢄⢬⢪⡪⡎⣆⡈⠚⠜⠕⠇⠗⠝⢕⢯⢫⣞⣯⣿⣻⡽⣏⢗⣗⠏⠀                                            ⠀⠪⡪⡪⣪⢪⢺⢸⢢⢓⢆⢤⢀⠀⠀⠀⠀⠈⢊⢞⡾⣿⡯⣏⢮⠷⠁⠀⠀                                            ⠀⠀⠀⠈⠊⠆⡃⠕⢕⢇⢇⢇⢇⢇⢏⢎⢎⢆⢄⠀⢑⣽⣿⢝⠲⠉⠀⠀⠀⠀                                            ⠀⠀⠀⠀⠀⡿⠂⠠⠀⡇⢇⠕⢈⣀⠀⠁⠡⠣⡣⡫⣂⣿⠯⢪⠰⠂⠀⠀⠀⠀                                            ⠀⠀⠀⠀⡦⡙⡂⢀⢤⢣⠣⡈⣾⡃⠠⠄⠀⡄⢱⣌⣶⢏⢊⠂⠀⠀⠀⠀⠀⠀                                            ⠀⠀⠀⠀⢝⡲⣜⡮⡏⢎⢌⢂⠙⠢⠐⢀⢘⢵⣽⣿⡿⠁⠁⠀⠀⠀⠀⠀⠀⠀                                            ⠀⠀⠀⠀⠨⣺⡺⡕⡕⡱⡑⡆⡕⡅⡕⡜⡼⢽⡻⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀                                            ⠀⠀⠀⠀⣼⣳⣫⣾⣵⣗⡵⡱⡡⢣⢑⢕⢜⢕⡝⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀                                            ⠀⠀⠀⣴⣿⣾⣿⣿⣿⡿⡽⡑⢌⠪⡢⡣⣣⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀                                            ⠀⠀⠀⡟⡾⣿⢿⢿⢵⣽⣾⣼⣘⢸⢸⣞⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀                                            ⠀⠀⠀⠀⠁⠇⠡⠩⡫⢿⣝⡻⡮⣒⢽⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀                                            —————————————————————————————");                go.AddComponent<Canvas>();            }            // go.transform.SetParent(transform.GetChild(0));            // amgo.SetActive(false);        }    }    private void StartGame()    {        _hasStarted = true;                                      EnableInstructions(false);        // ToggleGameplayUi(true);        if (LevelSelectManager.Instance != null)            LevelSelectManager.Instance.Start();          if (GameManager.Instance != null)            GameManager.Instance.GameIsRunning = true;    }    private void ToggleGameplayUi(bool on)    {        settingsButton.gameObject.SetActive(on);        timeDisplay.SetActive(on);        healthText.SetActive(on);        scoreText.SetActive(on);    }    private void ShowAll(bool on)    {        EnableBasicGameUI(on);        EnableSettingsSetup(on);        EnableSettingsButtons(on);        EnableMusicSettings(on);        //EnableInstructions(on);        EnableWinUI(on);        EnableLoseUI(on);    }        public void EnableBasicGameUI(bool on)    {        Debug.Log("Basic game UI enabled: " + on);        settingsButton?.SetActive(on);        timeDisplay?.SetActive(on);        healthText?.SetActive(on);        scoreText?.SetActive(on);    }    public void EnableSettingsSetup(bool on)    {        Debug.Log("Settings setup enabled: " + on);        settingsPanel?.SetActive(on);        settingsText?.SetActive(on);    }    public void EnableSettingsButtons(bool on)    {        exitButton?.SetActive(on);        levelSelectButton?.SetActive(on);        resumeButton?.SetActive(on);    }    public void EnableMusicSettings(bool on)    {                musicSliderText?.SetActive(on);        musicSlider?.SetActive(on);        sfxSliderText?.SetActive(on);        sfxSlider?.SetActive(on);    }    public void EnableInstructions(bool on)    {        instructionPanel?.SetActive(on);        instructionText?.SetActive(on);    }    public void EnableWinUI(bool on)    {        print("EnableWinUI: " + on);        winPanel?.SetActive(on);        winText?.SetActive(on);        winTimeText?.SetActive(on);        winScoreText?.SetActive(on);        winButtons?.SetActive(on);    }    public void EnableLoseUI(bool on)    {        losePanel?.SetActive(on);        loseText?.SetActive(on);    }    public void ExitButton()    {        ShowAll(false);        #if UNITY_EDITOR            UnityEditor.EditorApplication.isPlaying = false;        #else            Application.Quit();        #endif    }    public void LevelSelectButton()    {        ShowAll(false);        SceneManager.LoadScene(levelSelect);    }      public void SettingsButton()    {        ShowAll(false);        EnableSettingsButtons(true);        EnableMusicSettings(true);        EnableSettingsSetup(true);        EnableBasicGameUI(false);        _timeScale = Time.timeScale;        Time.timeScale = 0f;    }    public void ConfigButton()    {        ShowAll(false);        SceneManager.LoadScene(configScene);    }    public void ResumeButton()    {        ShowAll(false);        EnableSettingsButtons(false);        EnableMusicSettings(false);        EnableSettingsSetup(false);        EnableBasicGameUI(true);        Time.timeScale = _timeScale;    }    public void BackButton()    {        ShowAll(false);        Time.timeScale = 1f; SceneManager.LoadScene(levelSelect);    }    #if UNITY_EDITOR    public void ForceOpenConsole()    {        System.Type consoleType = typeof(EditorWindow).Assembly.GetType("UnityEditor.ConsoleWindow");        EditorWindow window = EditorWindow.GetWindow(consoleType);        window.Show();    }#endif    public void NextLevel()    {        var lsm = LevelSelectManager.Instance;        if (lsm == null)        {            Debug.LogWarning("NextLevel: no LevelSelectManager in this scene");            // ForceOpenConsole();            return;        }        var next = lsm.areaData.NextLevel(lsm.CurrentLevel.LevelID);        if (next == null)        {            Debug.LogWarning("NextLevel: already at final level, nothing to load");            return;        }        lsm.UnlockLevel(next.LevelID);                lsm.CurrentLevel = next;                Time.timeScale = 1f;        Debug.Log($"Loading next level: {next.LevelID} -> {next.LevelName}");                     UnityEngine.SceneManagement.SceneManager.LoadScene(next.scene);    }}